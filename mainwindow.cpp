#include <QProcess>
#include <QInputDialog>
#include <QDebug>
#include <QDir>

#include "mainwindow.h"
#include "ui_mainwindow.h"
#include "script.h"


MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    dbReady = true;

    Script *updater = new Script;
    updater->moveToThread(&workerThread);

    connect(&workerThread, &QThread::finished, updater, &QObject::deleteLater);
    connect(this, &MainWindow::doUpdate, updater, &Script::updateDB);
    connect(updater, &Script::DBUpdated, this, &MainWindow::DBUpdateDone);
    workerThread.start();

    ui->setupUi(this);
    db = QSqlDatabase::addDatabase("QSQLITE");
    db.setDatabaseName("C:/prog/project/temp/scripts/delicious.db");

// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    if(db.open())
    {
        //ui->statusBar->showMessage("db is open: " + db.databaseName());//√ß√ √Ø√®√±√º √Æ √≥√§√ √∑√≠√Æ√¨ √Ø√Æ√§√™√´√æ√∑√•√≠√®√® √™ √°√ √ß√• √§√ √≠√≠√ª√µ

              // model = new QSqlTableModel(this,db);// √¢√ª√¢√Æ√§ √°√ √ß√ª √§√ √≠√≠√ª√µ √≠√  √Ω√™√∞√ √≠
              //  ui->tableView->setModel(model);
    }
    else
        ui->statusBar->showMessage("db have error: "+ db.lastError().databaseText());
}     //   √é√Å√ê√Ä√Å√é√í√ä√Ä √ë√é√Å√õ√í√à√â √ì√Ñ√Ä√ó√ç√é√É√é √à √ç√Ö√ì√Ñ√Ä√ó√ç√é√É√é √è√é√Ñ√ä√ã√û√ó√Ö√ç√à√ü √ä √Å√Ñ
// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////

MainWindow::~MainWindow()
{
    delete ui;
}

void MainWindow::on_search_clicked()
{
    setlocale(LC_ALL, "RUS");

    if (!dbReady)
    {
        qDebug() << "DB is currently updating, pls wait";
        return;
    }

      QString search;

        search = ui->lineEdit->text();

        search.insert(0,"'");
        search.append("'");
       //√ä√Ä√Ç√õ√ó√ä√à √Ç √ç√Ä√ó√Ä√ã√à √à √ä√é√ç√ñ√Ö √á√Ä√è√ê√é√ë√Ä

         QString LowSearch = search.toLower();//√Ø√Æ√®√±√™√Æ√¢√ √ø √±√≤√∞√Æ√™√  √¢ √≠√®√¶√≠√•√¨ √∞√•√£√®√±√≤√∞√•
         // √≤√•√Ø√•√∞√º √≠√≥√¶√≠√Æ √Ø√∞√Æ√±√≤√ √¢√®√≤√º √ß√ √£√´√ √¢√≠√ª√• √°√≥√™√¢√ª √¢ √±√´√Æ√¢√ √µ))

          bool makeUpper = true;

              for (int i = 0; i < LowSearch.length(); i++) {
                  if (makeUpper && LowSearch[i].isLetter()) {
                      LowSearch[i] = LowSearch[i].toUpper();
                      makeUpper = false;
                  } else if (LowSearch[i] == ' ') {
                      makeUpper = true;
                  }
              }// √è√Ö√ê√Ç√õ√Ö √Å√ì√ä√Ç√õ √ë√í√Ä√ç√é√Ç√ü√í√ë√ü √á√Ä√É√ã√Ä√Ç√ç√õ√å√à

              for(int i = 0; i < LowSearch.length(); i++)//√è√∞√Æ√±√±√≤√ √¢√´√ø√•√¨ √™√Æ√¢√ª√∑√™√® √¢ √≠√≥√¶√≠√ª√µ √¨√•√±√≤√ √µ
              {
                  if(LowSearch[i]==',')
                  {
                     LowSearch.insert(i,"'");
                     LowSearch.insert(i+3,"'");
                     i += 2;
                  }

              }//√ä√Ä√Ç√õ√ó√ä√à √å√Ö√Ü√Ñ√ì √ë√ã√é√Ç √Ç √á√Ä√è√ê√é√ë√Ö

             //qDebug() << LowSearch;

        model = new QSqlQueryModel;//√±√Æ√ß√§√ √´√® √¨√Æ√§√•√´√º √§√´√ø √Æ√≤√Æ√°√∞√ √¶√•√≠√®√ø √ß√ √±√Ø√∞√Æ√±√ 

// /////////////////////////////////////////////////////////////////////////////////////////////
        const string separators{ " ,;:.\"!?'*\n" };
        vector <string> words; // √¢√•√™√≤√Æ√∞ √§√´√ø √µ√∞√ √≠√•√≠√®√ø √±√´√Æ√¢
        size_t start { LowSearch.toStdString().find_first_not_of(separators) };
        while (start != string::npos)
        {
            size_t end = LowSearch.toStdString().find_first_of(separators, start + 1);
            if (end == string::npos)
                end = search.toStdString().length();
            words.push_back(LowSearch.toStdString().substr(start, end - start));
            start = LowSearch.toStdString().find_first_not_of(separators, end + 1);
        }//√è√é√Ñ√ë√ó√Ö√í √ë√ã√é√Ç √Ç √ë√í√ê√é√ä√Ö
// ///////////////////////////////////////////////////////////////////////////////////////////////

        QSqlQuery qry;
        QString query = "SELECT r.name, r.Category "
                        "FROM Recipes r "
                        "JOIN Composition c ON r.id = c.id_recipe "
                         "JOIN Ingredients i ON c.id_ingredient = i.id "
                        "WHERE i.name IN (" + LowSearch + ")"
                        "GROUP BY r.name "
                        "HAVING COUNT(DISTINCT c.id_ingredient) = " + QString::number((int)words.size());

        if (qry.exec(query))//exec() √¢√Æ√ß√¢√∞√ √π√ √•√≤ √°√≥√´√•√¢√Æ √ß√≠√ √∑√•√≠√®√•, √™√Æ√≤√Æ√∞√Æ√• √≥√™√ √ß√ª√¢√ √•√≤, √≥√±√Ø√•√∏√≠√Æ √´√® √¢√ª√Ø√Æ√´√≠√•√≠ √ß√ √Ø√∞√Æ√±.
        {
            model->setQuery(query);
            ui->tableView->setModel(model);

           model->setHeaderData(0,Qt::Horizontal,"Recipes", Qt::DisplayRole);//√®√ß√¨√•√≠√®√´√® √≠√ √ß√¢√ √≠√®√• √±√≤√Æ√´√°√∂√ 


          // ui->tableView->horizontalHeader()->setSectionResizeMode(QHeaderView::Stretch);//√¢√ª√∞√ √¢√≠√®√¢√ √≠√®√• √Ø√Æ √∏√®√∞√®√≠√• √¢√®√§√¶√•√≤√ 
           ui->tableView->horizontalHeader()->setSectionResizeMode(QHeaderView::Fixed); // √ì√±√≤√ √≠√Æ√¢√™√  √∞√•√¶√®√¨√  √®√ß√¨√•√≠√•√≠√®√ø √∞√ √ß√¨√•√∞√Æ√¢ √¢√∞√≥√∑√≠√≥√æ
           int totalWidth = ui->tableView->width(); // √é√°√π√ √ø √∏√®√∞√®√≠√  TableView
           int firstColumnWidth = totalWidth * 0.55;
           int secondColumnWidth = totalWidth * 0.45;
           ui->tableView->setColumnWidth(0, firstColumnWidth); // √Ø√•√∞√¢√ª√© √±√≤√Æ√´√°√•√∂
           ui->tableView->setColumnWidth(1, secondColumnWidth); // √¢√≤√Æ√∞√Æ√© √±√≤√Æ√´√°√•√∂

          ui->tableView-> setSelectionBehavior(QAbstractItemView::SelectRows);//√¢√ª√§√•√´√ø√•√≤√±√ø √¢√±√ø √±√≤√∞√Æ√™√ , √  √≠√• √™√Æ√≠√™√∞√•√≤√≠√ √ø √ø√∑√•√©√™√ 
          ui->tableView->setHorizontalScrollBarPolicy(Qt::ScrollBarAlwaysOff);//√Æ√≤√™√´√æ√∑√ √•√¨ scroll √¢√´√•√¢√Æ/√¢√Ø√∞√ √¢√Æ
          // ui->tableView->setShowGrid(false); // c√™√∞√ª√¢√ √•√≤ √±√•√≤√™√≥(√á√Ä√ó√Ö√å? √  √ø √≠√• √ß√≠√ √æ
        }
        else return;
    }


void MainWindow::on_tableView_doubleClicked(const QModelIndex &index)
{
    if (index.isValid()) {
           QString first = index.sibling(index.row(), 0).data().toString(); // √è√•√∞√¢√ √ø √™√Æ√´√Æ√≠√™√ 
           QString second = index.sibling(index.row(), 1).data().toString();

           first.insert(0,"'");
           first.append("'");

           QSqlQuery qr;
           QString quer = "SELECT i.Name "
                           "FROM Recipes r "
                           "JOIN Composition c ON r.id = c.id_recipe "
                           "JOIN Ingredients i ON c.id_ingredient = i.id "
                           "WHERE r.name IN (" + first + ")";


          QSqlQueryModel *model2 = new QSqlQueryModel;//√±√Æ√ß√§√ √´√® √¨√Æ√§√•√´√º √§√´√ø √Æ√≤√Æ√°√∞√ √¶√•√≠√®√ø √ß√ √±√Ø√∞√Æ√±√ 
          ui->textBrowser->setFont(QFont("Verdana", 12));//e

           if (qr.exec(quer))
           {
             model2->setQuery(quer);
             ui->tableView->setModel(model2);

               QString result = "List ingredients:\n";
               ui->textBrowser->setText(result);
                result.clear();

                for (int row = 0; row < model2->rowCount(); ++row)
                {
                    QModelIndex index = model2->index(row, 0);
                    result += model2->data(index).toString() + "\n";
                }

                ui->textBrowser->append(result);
                 ui->tableView->setModel(model);
           }


    }


}

void MainWindow::on_actionUpdateDB_triggered()
{
    bool ok;
    const QStringList param = QInputDialog::getText(this, QString("Parameters"), QString("Enter parameters:"), QLineEdit::Normal,
                                              "", &ok).split(' ');

    if (ok && !param[0].isEmpty())
    {
        dbReady = false;
        emit doUpdate(param);
    }
}

void MainWindow::DBUpdateDone()
{
    dbReady = true;
}

